buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath "org.koin:koin-gradle-plugin:$koin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.10'
    id("io.gitlab.arturbosch.detekt").version("1.13.1")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental", "-Xjvm-default=enable"]
        jvmTarget = "1.8"
    }
}


apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'
apply plugin: 'koin'


group 'dev.remylavergne.spotfinder'
version '0.0.5'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
    implementation "io.ktor:ktor-metrics-micrometer:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version" // or "kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC2" // JVM dependency
    implementation "io.ktor:ktor-serialization:$ktor_version"
    implementation("com.squareup.moshi:moshi:1.9.3")
    // implementation("com.squareup.moshi:moshi-kotlin:1.9.3")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.11.0")

    // Koin
    compile "org.koin:koin-ktor:$koin_version"
    testCompile "org.koin:koin-test:$koin_version"

    // -----
    implementation 'org.litote.kmongo:kmongo:4.1.2'
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:1.13.1"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.13.1"
    compile 'io.micrometer:micrometer-registry-prometheus:1.5.5'
    implementation 'id.zelory:compressor:3.0.0'
    implementation 'de.mkammerer:argon2-jvm:2.7'
    // https://mvnrepository.com/artifact/net.coobird/thumbnailator
    compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.13'


    // Unit tests
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

detekt {
    failFast = true // fail build on any finding
    buildUponDefaultConfig = true // preconfigure defaults
    config = files("config/detekt.yml")
    // point to your custom config defining rules to run, overwriting default behavior
    baseline = file("config/baseline.xml") // a way of suppressing issues before introducing detekt

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true // similar to the console output, contains issue signature to manually edit baseline files
    }
}

tasks.detekt.jvmTarget = "1.8"

shadowJar {
    archiveBaseName.set('spotfinder-backend')
    archiveClassifier.set('')
    archiveVersion.set(getVersion())
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

